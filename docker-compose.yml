version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: uml-designer-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8080/api
      - VITE_WS_URL=ws://localhost:8080/collaboration
      - VITE_ENABLE_COLLABORATION=true
    networks:
      - uml-network
    restart: unless-stopped
    depends_on:
      - backend

  # Backend Service (Mock/Example)
  backend:
    image: node:18-alpine
    container_name: uml-designer-backend-dev
    working_dir: /app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:password@db:5432/uml_diagrams
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-super-secret-key-not-for-production
    networks:
      - uml-network
    restart: unless-stopped
    depends_on:
      - db
      - redis
    command: >
      sh -c "
        echo 'Backend service placeholder - Replace with actual backend implementation' &&
        npm init -y &&
        npm install express cors ws &&
        cat > server.js << 'EOF'
        const express = require('express');
        const cors = require('cors');
        const WebSocket = require('ws');
        const app = express();
        
        app.use(cors());
        app.use(express.json());
        
        // Health check
        app.get('/api/health', (req, res) => {
          res.json({ status: 'ok', timestamp: new Date().toISOString() });
        });
        
        // Mock API endpoints
        app.get('/api/diagrams', (req, res) => {
          res.json({ diagrams: [], total: 0 });
        });
        
        app.post('/api/diagrams', (req, res) => {
          res.json({ id: 'mock-id', name: req.body.name });
        });
        
        const server = app.listen(8080, '0.0.0.0', () => {
          console.log('Mock backend running on port 8080');
        });
        
        // WebSocket server
        const wss = new WebSocket.Server({ server, path: '/collaboration' });
        wss.on('connection', (ws) => {
          console.log('WebSocket client connected');
          ws.on('message', (message) => {
            console.log('Received:', message.toString());
            // Echo to all clients
            wss.clients.forEach((client) => {
              if (client !== ws && client.readyState === WebSocket.OPEN) {
                client.send(message);
              }
            });
          });
        });
        EOF
        node server.js
      "

  # Database
  db:
    image: postgres:15-alpine
    container_name: uml-designer-db-dev
    environment:
      - POSTGRES_DB=uml_diagrams
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - uml-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: uml-designer-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - uml-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Admin tools (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: uml-designer-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@localhost.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - uml-network
    restart: unless-stopped

networks:
  uml-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local